// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const getHeatmapData = `-- name: GetHeatmapData :many
SELECT
    (floor(latitude * 4)/4)::float8 AS lat_bin,
    (floor(longitude * 4)/4)::float8 AS lon_bin,
    COUNT(*) AS count
FROM aircraft_positions
WHERE time_position > now() - interval '15 minutes'
GROUP BY lat_bin, lon_bin
`

type GetHeatmapDataRow struct {
	LatBin float64
	LonBin float64
	Count  int64
}

func (q *Queries) GetHeatmapData(ctx context.Context) ([]GetHeatmapDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getHeatmapData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHeatmapDataRow
	for rows.Next() {
		var i GetHeatmapDataRow
		if err := rows.Scan(&i.LatBin, &i.LonBin, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPosition = `-- name: InsertPosition :exec
INSERT INTO aircraft_positions (
    icao24, callsign, origin_country, time_position,
    longitude, latitude, baro_altitude, on_ground,
    velocity, heading, vertical_rate
) VALUES (
    $1, $2, $3, to_timestamp($4),
    $5, $6, $7, $8,
    $9, $10, $11
)
`

type InsertPositionParams struct {
	Icao24        sql.NullString
	Callsign      sql.NullString
	OriginCountry sql.NullString
	ToTimestamp   float64
	Longitude     sql.NullFloat64
	Latitude      sql.NullFloat64
	BaroAltitude  sql.NullFloat64
	OnGround      sql.NullBool
	Velocity      sql.NullFloat64
	Heading       sql.NullFloat64
	VerticalRate  sql.NullFloat64
}

func (q *Queries) InsertPosition(ctx context.Context, arg InsertPositionParams) error {
	_, err := q.db.ExecContext(ctx, insertPosition,
		arg.Icao24,
		arg.Callsign,
		arg.OriginCountry,
		arg.ToTimestamp,
		arg.Longitude,
		arg.Latitude,
		arg.BaroAltitude,
		arg.OnGround,
		arg.Velocity,
		arg.Heading,
		arg.VerticalRate,
	)
	return err
}
